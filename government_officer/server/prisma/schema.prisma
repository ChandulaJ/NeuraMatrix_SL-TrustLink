generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  fullName     String
  username     String    @unique
  email        String    @unique
  passwordHash String
  role         String
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  schedules        AdminSchedule[]
  auditReports     AuditReport[] @relation("AuditReportsByAuditor")
  notifications    Notification[]
  applications     Application[]
  appointmentsMade Appointment[] @relation("AppointmentsByAdmin")
}

model Service {
  id   Int    @id @default(autoincrement())
  name String
  applications Application[]
}

model Application {
  id          Int       @id @default(autoincrement())
  userId      Int
  serviceId   Int
  type        String
  status      String    @default("PENDING")
  scheduledAt DateTime?  // requested slot
  notes       String?

  region        String?
  locationText  String?
  licenseNumber String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id])
  documents   ApplicationDocument[]
  auditReport AuditReport?
  appointments Appointment[]
}

model ApplicationDocument {
  id            Int @id @default(autoincrement())
  applicationId Int
  name          String
  url           String

  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model AuditReport {
  id              Int       @id @default(autoincrement())
  applicationId   Int       @unique
  auditorId       Int
  date            DateTime
  result          String
  notes           String?
  photoEvidenceUrl String?
  checklist       String    // stored as JSON string

  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  auditor       User        @relation("AuditReportsByAuditor", fields: [auditorId], references: [id])
}

model AdminSchedule {
  id      Int      @id @default(autoincrement())
  adminId Int
  start   DateTime
  end     DateTime
  title   String

  admin   User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Appointment {
  id              Int       @id @default(autoincrement())
  applicationId   Int
  decidedBy       Int
  requestedAt     DateTime?
  accepted        Boolean
  scheduledFor    DateTime
  overlapDetected Boolean   @default(false)
  overlapCount    Int       @default(0)
  decidedAt       DateTime  @default(now())

  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  admin           User        @relation("AppointmentsByAdmin", fields: [decidedBy], references: [id])
}

model IntegrityFlag {
  id          Int        @id @default(autoincrement())
  level       String
  title       String
  description String
  status      String     @default("OPEN")
  createdAt   DateTime   @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  body      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
