{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 01:45:51"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 01:45:51"}
{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:23:56"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:23:56"}
{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:24:17"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:24:17"}
{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:25:20"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:25:20"}
{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:28:51"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:28:51"}
{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:29:07"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:29:07"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\nD:\\Trustlink\\NeuraMatrix_SL-TrustLink\\server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`serviceId`)","timestamp":"2025-08-13 18:33:28"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\nD:\\Trustlink\\NeuraMatrix_SL-TrustLink\\server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`serviceId`)","timestamp":"2025-08-13 18:33:28"}
{"clientVersion":"6.14.0","code":"P2021","level":"error","message":"Error during server startup: \nInvalid `prisma.user.findUnique()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:5:42\n\n  2 import { Gender, Role } from \"../../models/User\";\n  3 \n  4 export async function seedDummyUser() {\n→ 5   const existingUser = await prisma.user.findUnique(\nThe table `User` does not exist in the current database.","meta":{"modelName":"User","table":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:5:42\n\n  2 import { Gender, Role } from \"../../models/User\";\n  3 \n  4 export async function seedDummyUser() {\n→ 5   const existingUser = await prisma.user.findUnique(\nThe table `User` does not exist in the current database.\n    at ei.handleRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:228:13)\n    at ei.handleAndLogRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:174:12)\n    at ei.request (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:143:12)\n    at async a (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/getPrismaClient.ts:833:24)","timestamp":"2025-08-14 00:14:27"}
{"level":"error","message":"Failed to create appointment: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","timestamp":"2025-08-13 18:58:45"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","timestamp":"2025-08-13 18:58:45"}
{"level":"error","message":"Failed to create appointment: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","timestamp":"2025-08-13 18:59:59"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","timestamp":"2025-08-13 18:59:59"}
{"clientVersion":"6.14.0","level":"error","message":"Error during server startup: \nInvalid `prisma.user.findUnique()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:5:42\n\n  2 import { Gender, Role } from \"../../models/User\";\n  3 \n  4 export async function seedDummyUser() {\n→ 5   const existingUser = await prisma.user.findUnique(\nCan't reach database server at `localhost:3307`\n\nPlease make sure your database server is running at `localhost:3307`.","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:5:42\n\n  2 import { Gender, Role } from \"../../models/User\";\n  3 \n  4 export async function seedDummyUser() {\n→ 5   const existingUser = await prisma.user.findUnique(\nCan't reach database server at `localhost:3307`\n\nPlease make sure your database server is running at `localhost:3307`.\n    at ei.handleRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:242:13)\n    at ei.handleAndLogRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:174:12)\n    at ei.request (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:143:12)\n    at async a (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/getPrismaClient.ts:833:24)","timestamp":"2025-08-14 00:31:03"}
{"level":"info","message":"Created bucket: appointment-documents","timestamp":"2025-08-14 13:32:15"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:11:56.616Z\"),\n            updatedAt: new Date(\"2025-08-14T08:11:56.616Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:41:57"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:11:56.616Z\"),\n            updatedAt: new Date(\"2025-08-14T08:11:56.616Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:41:57"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:13:40.498Z\"),\n            updatedAt: new Date(\"2025-08-14T08:13:40.498Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:43:40"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:13:40.498Z\"),\n            updatedAt: new Date(\"2025-08-14T08:13:40.498Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:43:40"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:19:12.915Z\"),\n            updatedAt: new Date(\"2025-08-14T08:19:12.915Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:49:13"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:19:12.915Z\"),\n            updatedAt: new Date(\"2025-08-14T08:19:12.915Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:49:13"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:21:36.723Z\"),\n            updatedAt: new Date(\"2025-08-14T08:21:36.723Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:51:36"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:21:36.723Z\"),\n            updatedAt: new Date(\"2025-08-14T08:21:36.723Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:51:36"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:22:39.639Z\"),\n            updatedAt: new Date(\"2025-08-14T08:22:39.639Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:52:39"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:22:39.639Z\"),\n            updatedAt: new Date(\"2025-08-14T08:22:39.639Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:52:39"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:25:33.476Z\"),\n            updatedAt: new Date(\"2025-08-14T08:25:33.476Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:55:33"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:25:33.476Z\"),\n            updatedAt: new Date(\"2025-08-14T08:25:33.476Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:55:33"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: \"1\",\n                    ~~~\n            serviceId: \"1\",\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: \"2024-08-15T10:00:00Z\",\n            notes: \"Appointment with documents\",\n            documentNames: \"[\\\"NIC\\\", \\\"Passport\\\"]\",\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:33:38.913Z\"),\n            updatedAt: new Date(\"2025-08-14T08:33:38.913Z\")\n          }\n        })\n\nArgument `userId`: Invalid value provided. Expected Int, provided String.","timestamp":"2025-08-14 14:03:39"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: \"1\",\n                    ~~~\n            serviceId: \"1\",\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: \"2024-08-15T10:00:00Z\",\n            notes: \"Appointment with documents\",\n            documentNames: \"[\\\"NIC\\\", \\\"Passport\\\"]\",\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:33:38.913Z\"),\n            updatedAt: new Date(\"2025-08-14T08:33:38.913Z\")\n          }\n        })\n\nArgument `userId`: Invalid value provided. Expected Int, provided String.","timestamp":"2025-08-14 14:03:39"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: \"1\",\n                    ~~~\n            serviceId: \"1\",\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: new Date(\"2024-08-15T10:00:00.000Z\"),\n            notes: \"Appointment with documents\",\n            documentNames: \"[\\\"NIC\\\", \\\"Passport\\\"]\",\n            documents: [\n              {\n                name: \"NIC\",\n                url: \"http://localhost:9000/appointment-documents/user_1/NIC_1755160576953.pdf\"\n              },\n              {\n                name: \"Passport\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Passport_1755160576954.png\"\n              }\n            ],\n            createdAt: new Date(\"2025-08-14T08:36:17.019Z\"),\n            updatedAt: new Date(\"2025-08-14T08:36:17.019Z\")\n          }\n        })\n\nArgument `userId`: Invalid value provided. Expected Int, provided String.","timestamp":"2025-08-14 14:06:17"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: 1,\n            serviceId: 1,\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: new Date(\"2024-08-15T10:00:00.000Z\"),\n            notes: \"Appointment with documents\",\n            documentNames: \"[\\\"NIC\\\", \\\"Passport\\\"]\",\n            ~~~~~~~~~~~~~\n            documents: [\n              {\n                name: \"NIC\",\n                url: \"http://localhost:9000/appointment-documents/user_1/NIC_1755160734152.pdf\"\n              },\n              {\n                name: \"Passport\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Passport_1755160734153.png\"\n              }\n            ],\n            createdAt: new Date(\"2025-08-14T08:38:54.214Z\"),\n            updatedAt: new Date(\"2025-08-14T08:38:54.214Z\"),\n        ?   id?: Int\n          }\n        })\n\nUnknown argument `documentNames`. Available options are marked with ?.","timestamp":"2025-08-14 14:08:54"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: 1,\n            serviceId: 1,\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: new Date(\"2024-08-15T10:00:00.000Z\"),\n            notes: \"Appointment with documents\",\n            documentNames: \"[\\\"NIC\\\", \\\"Passport\\\"]\",\n            ~~~~~~~~~~~~~\n            documents: [\n              {\n                name: \"NIC\",\n                url: \"http://localhost:9000/appointment-documents/user_1/NIC_1755160948991.pdf\"\n              },\n              {\n                name: \"Passport\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Passport_1755160948994.png\"\n              }\n            ],\n            createdAt: new Date(\"2025-08-14T08:42:29.070Z\"),\n            updatedAt: new Date(\"2025-08-14T08:42:29.070Z\"),\n        ?   id?: Int\n          }\n        })\n\nUnknown argument `documentNames`. Available options are marked with ?.","timestamp":"2025-08-14 14:12:29"}
{"level":"info","message":"Uploaded 2 documents for appointment.","timestamp":"2025-08-14 14:21:45"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-14 17:07:21"}
{"level":"info","message":"Uploaded 2 documents for appointment.","timestamp":"2025-08-14 17:09:00"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-14 18:58:14"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-14 19:34:45"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-14 19:38:13"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`userId`)","timestamp":"2025-08-14 19:38:13"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-14 19:40:18"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-14 19:44:41"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`userId`)","timestamp":"2025-08-14 19:44:41"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-14 19:44:47"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-14 19:45:04"}
{"clientVersion":"6.14.0","level":"error","message":"Error fetching service: \nInvalid `prisma.service.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaServiceInterface.ts:11:37\n\n   8 }\n   9 \n  10 async getServiceById(id: string): Promise<Service | null> {\n→ 11     return await prisma.service.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.service.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaServiceInterface.ts:11:37\n\n   8 }\n   9 \n  10 async getServiceById(id: string): Promise<Service | null> {\n→ 11     return await prisma.service.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.\n    at throwValidationException (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\core\\errorRendering\\throwValidationException.ts:45:9)\n    at ei.handleRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:174:12)\n    at ei.request (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:143:12)\n    at async a (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\getPrismaClient.ts:833:24)","timestamp":"2025-08-15 13:27:48"}
{"clientVersion":"6.14.0","level":"error","message":"Error fetching service: \nInvalid `prisma.service.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaServiceInterface.ts:11:37\n\n   8 }\n   9 \n  10 async getServiceById(id: string): Promise<Service | null> {\n→ 11     return await prisma.service.findUnique({\n           where: {\n             id: \"departmentId\"\n                 ~~~~~~~~~~~~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.service.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaServiceInterface.ts:11:37\n\n   8 }\n   9 \n  10 async getServiceById(id: string): Promise<Service | null> {\n→ 11     return await prisma.service.findUnique({\n           where: {\n             id: \"departmentId\"\n                 ~~~~~~~~~~~~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.\n    at throwValidationException (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\core\\errorRendering\\throwValidationException.ts:45:9)\n    at ei.handleRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:174:12)\n    at ei.request (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:143:12)\n    at async a (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\getPrismaClient.ts:833:24)","timestamp":"2025-08-15 13:28:47"}
{"clientVersion":"6.14.0","level":"error","message":"Error fetching department: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.\n    at throwValidationException (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\core\\errorRendering\\throwValidationException.ts:45:9)\n    at ei.handleRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:174:12)\n    at ei.request (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:143:12)\n    at async a (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\getPrismaClient.ts:833:24)","timestamp":"2025-08-15 14:03:10"}
{"clientVersion":"6.14.0","level":"error","message":"Error fetching department: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.\n    at throwValidationException (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\core\\errorRendering\\throwValidationException.ts:45:9)\n    at ei.handleRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:174:12)\n    at ei.request (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:143:12)\n    at async a (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\getPrismaClient.ts:833:24)","timestamp":"2025-08-15 14:03:40"}
{"clientVersion":"6.14.0","level":"error","message":"Error fetching department: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.\n    at throwValidationException (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\core\\errorRendering\\throwValidationException.ts:45:9)\n    at ei.handleRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:174:12)\n    at ei.request (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:143:12)\n    at async a (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\getPrismaClient.ts:833:24)","timestamp":"2025-08-15 14:04:03"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`userId`)","timestamp":"2025-08-15 14:16:53"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`userId`)","timestamp":"2025-08-15 14:16:53"}
{"dateOfBirth":"2025-08-16","email":"dinuk@gmail.com","firstName":"dinuk","gender":"MALE","lastName":"pathiraja","level":"info","message":"Registration Body:","nationalId":"9913219420","password":"12345678","phoneNumber":"0711570452","role":"CITIZEN","timestamp":"2025-08-15 18:32:16"}
{"dateOfBirth":"2025-08-13","email":"dinukpkcc@gmail.com","firstName":"dinuk","gender":"MALE","lastName":"pathiraja","level":"info","message":"Registration Body:","nationalId":"9913219421","password":"12345678","phoneNumber":"0711570452","role":"CITIZEN","timestamp":"2025-08-15 18:56:06"}
{"dateOfBirth":"2025-08-13","email":"dinuk@gmail.com","firstName":"dinuk","gender":"MALE","lastName":"pathiraja","level":"info","message":"Registration Body:","nationalId":"9913219422","password":"12345678","phoneNumber":"0711570452","role":"CITIZEN","timestamp":"2025-08-15 20:12:11"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-15 21:51:05"}
{"clientVersion":"6.14.0","level":"error","message":"Error during server startup: \nInvalid `prisma.service.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:166:30\n\n  163 });\n  164 \n  165 if (!existingService) {\n→ 166   await prisma.service.create({\n          data: {\n            name: \"Tourist Visa Issuance\",\n            description: \"Issuance of visas for tourists visiting Sri Lanka.\",\n            duration: 10,\n            price: 50,\n            availableSlots: 100,\n            requirements: [\n              \"Passport\",\n              \"Passport-sized Photo\",\n              \"Visa Application Form\"\n            ],\n            category: \"Visa\",\n            departmentId: 2,\n            status: \"available\",\n            ~~~~~~\n        ?   id?: Int,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput\n          }\n        })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.service.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:166:30\n\n  163 });\n  164 \n  165 if (!existingService) {\n→ 166   await prisma.service.create({\n          data: {\n            name: \"Tourist Visa Issuance\",\n            description: \"Issuance of visas for tourists visiting Sri Lanka.\",\n            duration: 10,\n            price: 50,\n            availableSlots: 100,\n            requirements: [\n              \"Passport\",\n              \"Passport-sized Photo\",\n              \"Visa Application Form\"\n            ],\n            category: \"Visa\",\n            departmentId: 2,\n            status: \"available\",\n            ~~~~~~\n        ?   id?: Int,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput\n          }\n        })\n\nUnknown argument `status`. Available options are marked with ?.\n    at throwValidationException (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/core/errorRendering/throwValidationException.ts:45:9)\n    at ei.handleRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:174:12)\n    at ei.request (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:143:12)\n    at async a (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/getPrismaClient.ts:833:24)","timestamp":"2025-08-15 21:51:05"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-15 21:52:16"}
{"clientVersion":"6.14.0","level":"error","message":"Error during server startup: \nInvalid `prisma.service.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:166:30\n\n  163 });\n  164 \n  165 if (!existingService) {\n→ 166   await prisma.service.create({\n          data: {\n            name: \"Tourist Visa Issuance\",\n            description: \"Issuance of visas for tourists visiting Sri Lanka.\",\n            duration: 10,\n            price: 50,\n            availableSlots: 100,\n            requirements: [\n              \"Passport\",\n              \"Passport-sized Photo\",\n              \"Visa Application Form\"\n            ],\n            category: \"Visa\",\n            departmentId: 2,\n            status: \"available\",\n            ~~~~~~\n        ?   id?: Int,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput\n          }\n        })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.service.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:166:30\n\n  163 });\n  164 \n  165 if (!existingService) {\n→ 166   await prisma.service.create({\n          data: {\n            name: \"Tourist Visa Issuance\",\n            description: \"Issuance of visas for tourists visiting Sri Lanka.\",\n            duration: 10,\n            price: 50,\n            availableSlots: 100,\n            requirements: [\n              \"Passport\",\n              \"Passport-sized Photo\",\n              \"Visa Application Form\"\n            ],\n            category: \"Visa\",\n            departmentId: 2,\n            status: \"available\",\n            ~~~~~~\n        ?   id?: Int,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput\n          }\n        })\n\nUnknown argument `status`. Available options are marked with ?.\n    at throwValidationException (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/core/errorRendering/throwValidationException.ts:45:9)\n    at ei.handleRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:174:12)\n    at ei.request (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:143:12)\n    at async a (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/getPrismaClient.ts:833:24)","timestamp":"2025-08-15 21:52:16"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-15 21:54:27"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-15 21:54:28"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-15 21:54:28"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-15 21:55:49"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-15 21:55:49"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-15 21:55:49"}
{"level":"error","message":"Error during server startup: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","stack":"MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.\n    at Socket.<anonymous> (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/ioredis/built/redis/event_handler.js:182:37)\n    at Object.onceWrapper (node:events:632:26)\n    at Socket.emit (node:events:517:28)\n    at Socket.emit (node:domain:489:12)\n    at TCP.<anonymous> (node:net:351:12)","timestamp":"2025-08-15 21:56:00"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-15 21:59:46"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-15 21:59:46"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-15 21:59:46"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-15 21:59:46"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-15 21:59:46"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-15 22:00:07"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: 1,\n            serviceId: 1,\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: new Date(\"2025-08-17T10:00:00.000Z\"),\n            notes: \"Appointment with documents\",\n            documents: [\n              {\n                name: \"Computer Studies_CA 15B-1.pdf\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Computer Studies_CA 15B-1.pdf_1755275407522.pdf\"\n              }\n            ],\n            createdAt: new Date(\"2025-08-15T16:30:07.601Z\"),\n            updatedAt: new Date(\"2025-08-15T16:30:07.601Z\"),\n        +   reference: String\n          }\n        })\n\nArgument `reference` is missing.","timestamp":"2025-08-15 22:00:07"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-15 22:08:17"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-15 22:10:31"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-15 22:10:31"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-15 22:10:31"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-15 22:10:31"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-15 22:10:31"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-15 22:10:38"}
{"level":"info","message":"Uploaded 1 documents for appointment.","timestamp":"2025-08-15 22:13:13"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 00:30:12"}
{"level":"error","message":"Failed to ensure bucket exists: ","timestamp":"2025-08-16 00:30:12"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 00:30:13"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 00:30:13"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 00:30:25"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 00:30:25"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 00:30:25"}
{"level":"error","message":"Failed to ensure bucket exists: ","timestamp":"2025-08-16 00:30:25"}
{"level":"error","message":"Error during server startup: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","stack":"MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.\n    at Socket.<anonymous> (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\ioredis\\built\\redis\\event_handler.js:182:37)\n    at Object.onceWrapper (node:events:622:26)\n    at Socket.emit (node:events:507:28)\n    at Socket.emit (node:domain:489:12)\n    at TCP.<anonymous> (node:net:351:12)","timestamp":"2025-08-16 00:30:35"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 00:32:53"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 00:32:53"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 00:32:53"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 00:32:53"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-16 00:32:53"}
{"level":"info","message":"Created bucket: appointment-documents","timestamp":"2025-08-16 00:32:53"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 00:36:28"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 00:36:29"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 00:36:29"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 00:36:29"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-16 00:36:29"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 00:38:40"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 00:38:40"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 00:38:40"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 00:38:40"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-16 00:38:40"}
{"dateOfBirth":"2025-08-16","email":"dinuk@gmail.com","firstName":"dinuk","gender":"MALE","lastName":"pathiraja","level":"info","message":"Registration Body:","nationalId":"9913219421","password":"12345678","phoneNumber":"0711570452","role":"CITIZEN","timestamp":"2025-08-16 00:40:59"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 01:44:35"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 01:44:35"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 01:44:35"}
{"level":"error","message":"Failed to ensure bucket exists: ","timestamp":"2025-08-16 01:44:35"}
{"level":"error","message":"Error during server startup: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","stack":"MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.\n    at Socket.<anonymous> (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\ioredis\\built\\redis\\event_handler.js:182:37)\n    at Object.onceWrapper (node:events:622:26)\n    at Socket.emit (node:events:507:28)\n    at Socket.emit (node:domain:489:12)\n    at TCP.<anonymous> (node:net:351:12)","timestamp":"2025-08-16 01:44:46"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 01:50:03"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 01:50:03"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 01:50:03"}
{"level":"error","message":"Failed to ensure bucket exists: ","timestamp":"2025-08-16 01:50:03"}
{"level":"error","message":"Error during server startup: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","stack":"MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.\n    at Socket.<anonymous> (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\ioredis\\built\\redis\\event_handler.js:182:37)\n    at Object.onceWrapper (node:events:622:26)\n    at Socket.emit (node:events:507:28)\n    at Socket.emit (node:domain:489:12)\n    at TCP.<anonymous> (node:net:351:12)","timestamp":"2025-08-16 01:50:13"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 01:50:42"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 01:50:42"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 01:50:42"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 01:50:42"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-16 01:50:42"}
{"dateOfBirth":"2025-08-14","email":"dinukpkcc@gmail.com","firstName":"dinuk","gender":"MALE","lastName":"pathikaja","level":"info","message":"Registration Body:","nationalId":"991321942V","password":"12345678","phoneNumber":"0711570452","role":"CITIZEN","timestamp":"2025-08-16 01:50:50"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 01:57:13"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 01:57:13"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 01:57:13"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 01:57:13"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-16 01:57:13"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 01:58:20"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 01:58:20"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 01:58:20"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 01:58:20"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-16 01:58:20"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 02:01:18"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 02:01:18"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 02:01:18"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 02:01:18"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-16 02:01:18"}
{"level":"error","message":"Failed to send QR code via WhatsApp: Failed to send QR code: WhatsApp client not ready: WhatsApp client initialization timeout","timestamp":"2025-08-16 02:02:13"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 02:11:47"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 02:11:47"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 02:11:47"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 02:11:47"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-16 02:11:47"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 02:15:20"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 02:15:20"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 02:15:20"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 02:15:20"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-16 02:15:29"}
{"level":"info","message":"QR code sent to WhatsApp for user 2","timestamp":"2025-08-16 02:16:23"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 13:29:51"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 13:29:51"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 13:29:51"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 13:29:51"}
{"level":"info","message":"Server started on port 3000","timestamp":"2025-08-16 13:30:11"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 13:34:00"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 13:34:00"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 13:34:00"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 13:34:00"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 13:34:00"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 13:34:00"}
{"level":"error","message":"Protocol error (Runtime.callFunctionOn): Execution context was destroyed.","name":"ProtocolError","originalMessage":"Execution context was destroyed.","stack":"ProtocolError: Protocol error (Runtime.callFunctionOn): Execution context was destroyed.\n    at D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\puppeteer-core\\src\\common\\Connection.ts:400:16\n    at new Promise (<anonymous>)\n    at CDPSessionImpl.send (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\puppeteer-core\\src\\common\\Connection.ts:396:12)\n    at ExecutionContext._ExecutionContext_evaluate (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\puppeteer-core\\src\\common\\ExecutionContext.ts:274:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async ExecutionContext.evaluate (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\puppeteer-core\\src\\common\\ExecutionContext.ts:137:12)","timestamp":"2025-08-16 13:34:23"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 13:36:16"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 13:36:16"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 13:36:16"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 13:36:16"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 13:36:16"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 13:36:16"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 13:36:25"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 13:51:20"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 13:51:20"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 13:51:20"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 13:51:20"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 13:51:20"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 13:51:20"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 13:51:36"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 13:52:33"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 13:52:33"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 13:52:33"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 13:52:33"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 13:52:33"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 13:52:33"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 13:52:42"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 14:15:38"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 14:15:38"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 14:15:38"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 14:15:39"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 14:15:39"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 14:15:39"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 14:15:56"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 14:37:54"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 14:37:54"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 14:37:54"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 14:37:54"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 14:37:54"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 14:37:54"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 14:38:05"}
{"dateOfBirth":"2025-08-16","email":"dinukpkcc@gmail.com","firstName":"dinuk","gender":"MALE","lastName":"pathiraja","level":"info","message":"Registration Body:","nationalId":"9913219421","password":"12345678","phoneNumber":"0711570452","role":"CITIZEN","timestamp":"2025-08-16 14:38:55"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 16:02:16"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 16:02:16"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 16:02:16"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 16:02:16"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 16:02:16"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 16:02:16"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 16:02:28"}
{"dateOfBirth":"2025-08-16","email":"dinukpkcc@gmail.com","firstName":"dinuk","gender":"MALE","lastName":"pathiraja","level":"info","message":"Registration Body:","nationalId":"9913219422","password":"12345678","phoneNumber":"0711570452","role":"CITIZEN","timestamp":"2025-08-16 16:03:35"}
{"level":"error","message":"Failed to get user appointments: \nInvalid `prisma.appointment.findMany()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:35:31\n\n  32 }\n  33 \n  34 async findByUser(userId: number): Promise<Appointment[]> {\n→ 35   return prisma.appointment.findMany({\n         where: {\n           userId: 1\n         },\n         include: {\n           user: true,\n           service: {\n             include: {\n               department: true,\n               documents: true,\n               ~~~~~~~~~\n       ?       appointments?: true\n             }\n           }\n         }\n       })\n\nUnknown field `documents` for include statement on model `Service`. Available options are marked with ?.","timestamp":"2025-08-16 16:03:59"}
{"level":"error","message":"Failed to get user appointments: Failed to get user appointments: \nInvalid `prisma.appointment.findMany()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:35:31\n\n  32 }\n  33 \n  34 async findByUser(userId: number): Promise<Appointment[]> {\n→ 35   return prisma.appointment.findMany({\n         where: {\n           userId: 1\n         },\n         include: {\n           user: true,\n           service: {\n             include: {\n               department: true,\n               documents: true,\n               ~~~~~~~~~\n       ?       appointments?: true\n             }\n           }\n         }\n       })\n\nUnknown field `documents` for include statement on model `Service`. Available options are marked with ?.","timestamp":"2025-08-16 16:03:59"}
{"level":"error","message":"Failed to get user appointments: \nInvalid `prisma.appointment.findMany()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:35:31\n\n  32 }\n  33 \n  34 async findByUser(userId: number): Promise<Appointment[]> {\n→ 35   return prisma.appointment.findMany({\n         where: {\n           userId: 1\n         },\n         include: {\n           user: true,\n           service: {\n             include: {\n               department: true,\n               documents: true,\n               ~~~~~~~~~\n       ?       appointments?: true\n             }\n           }\n         }\n       })\n\nUnknown field `documents` for include statement on model `Service`. Available options are marked with ?.","timestamp":"2025-08-16 16:06:10"}
{"level":"error","message":"Failed to get user appointments: Failed to get user appointments: \nInvalid `prisma.appointment.findMany()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:35:31\n\n  32 }\n  33 \n  34 async findByUser(userId: number): Promise<Appointment[]> {\n→ 35   return prisma.appointment.findMany({\n         where: {\n           userId: 1\n         },\n         include: {\n           user: true,\n           service: {\n             include: {\n               department: true,\n               documents: true,\n               ~~~~~~~~~\n       ?       appointments?: true\n             }\n           }\n         }\n       })\n\nUnknown field `documents` for include statement on model `Service`. Available options are marked with ?.","timestamp":"2025-08-16 16:06:10"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 16:09:48"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 16:09:48"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 16:09:48"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 16:09:48"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 16:09:48"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 16:09:48"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 16:09:59"}
{"level":"error","message":"Failed to get user appointments: \nInvalid `prisma.appointment.findMany()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:38:31\n\n  35 }\n  36 \n  37 async findByUser(userId: number): Promise<Appointment[]> {\n→ 38   return prisma.appointment.findMany({\n         where: {\n           userId: 1\n         },\n         include: {\n           user: true,\n           service: {\n             include: {\n               department: true\n             }\n           },\n           documents: true,\n           ~~~~~~~~~\n       ?   user?: true,\n       ?   service?: true,\n       ?   documentsRelation?: true\n         }\n       })\n\nInvalid scalar field `documents` for include statement on model Appointment. Available options are marked with ?.\nNote that include statements only accept relation fields.","timestamp":"2025-08-16 16:10:35"}
{"level":"error","message":"Failed to get user appointments: Failed to get user appointments: \nInvalid `prisma.appointment.findMany()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:38:31\n\n  35 }\n  36 \n  37 async findByUser(userId: number): Promise<Appointment[]> {\n→ 38   return prisma.appointment.findMany({\n         where: {\n           userId: 1\n         },\n         include: {\n           user: true,\n           service: {\n             include: {\n               department: true\n             }\n           },\n           documents: true,\n           ~~~~~~~~~\n       ?   user?: true,\n       ?   service?: true,\n       ?   documentsRelation?: true\n         }\n       })\n\nInvalid scalar field `documents` for include statement on model Appointment. Available options are marked with ?.\nNote that include statements only accept relation fields.","timestamp":"2025-08-16 16:10:35"}
{"level":"error","message":"Failed to get user appointments: \nInvalid `prisma.appointment.findMany()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:38:31\n\n  35 }\n  36 \n  37 async findByUser(userId: number): Promise<Appointment[]> {\n→ 38   return prisma.appointment.findMany({\n         where: {\n           userId: 1\n         },\n         include: {\n           user: true,\n           service: {\n             include: {\n               department: true\n             }\n           },\n           documents: true,\n           ~~~~~~~~~\n       ?   user?: true,\n       ?   service?: true,\n       ?   documentsRelation?: true\n         }\n       })\n\nInvalid scalar field `documents` for include statement on model Appointment. Available options are marked with ?.\nNote that include statements only accept relation fields.","timestamp":"2025-08-16 16:11:02"}
{"level":"error","message":"Failed to get user appointments: Failed to get user appointments: \nInvalid `prisma.appointment.findMany()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:38:31\n\n  35 }\n  36 \n  37 async findByUser(userId: number): Promise<Appointment[]> {\n→ 38   return prisma.appointment.findMany({\n         where: {\n           userId: 1\n         },\n         include: {\n           user: true,\n           service: {\n             include: {\n               department: true\n             }\n           },\n           documents: true,\n           ~~~~~~~~~\n       ?   user?: true,\n       ?   service?: true,\n       ?   documentsRelation?: true\n         }\n       })\n\nInvalid scalar field `documents` for include statement on model Appointment. Available options are marked with ?.\nNote that include statements only accept relation fields.","timestamp":"2025-08-16 16:11:02"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 16:17:02"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 16:17:02"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 16:17:02"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 16:17:02"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 16:17:02"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 16:17:02"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 16:17:14"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 16:20:30"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 16:20:30"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 16:20:30"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 16:20:30"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 16:20:30"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 16:20:30"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 16:20:39"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 16:26:01"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 16:26:01"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 16:26:01"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 16:26:01"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 16:26:01"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 16:26:01"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 16:26:10"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 16:30:19"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 16:30:19"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 16:30:19"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 16:30:19"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 16:30:19"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 16:30:19"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 16:30:28"}
{"dateOfBirth":"2025-08-25","email":"chathuryaprasad@gmail.com","firstName":"Chathurya","gender":"MALE","lastName":"Prasad","level":"info","message":"Registration Body:","nationalId":"9912325641","password":"12345678","phoneNumber":"0702672689","role":"CITIZEN","timestamp":"2025-08-16 16:31:07"}
{"level":"info","message":"Starting appointment creation...","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"Request body: {\"userId\":\"1\",\"serviceId\":\"1\",\"type\":\"IN_PERSON\",\"status\":\"PENDING\",\"scheduledAt\":\"2025-08-16T03:30:32.338Z\",\"reference\":\"APP-1-121452\",\"notes\":\"need to meet in person\"}","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"Number of files uploaded: 3","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"Appointment data prepared: {\"userId\":1,\"serviceId\":1,\"type\":\"IN_PERSON\",\"status\":\"PENDING\",\"scheduledAt\":\"2025-08-16T03:30:32.338Z\",\"reference\":\"APP-1-121452\",\"notes\":\"need to meet in person\"}","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"Looking up user with ID: 1","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"User found: chathuryaprasad@gmail.com","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"Looking up service with ID: 1","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"Service found: Tourist Visa Issuance","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"Starting document upload for 3 files","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"File names: [\"Black and Red Business Application Letter.jpg\",\"Black and Red Business Application Letter.jpg\",\"Black and Red Business Application Letter.jpg\"]","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"Successfully uploaded 3 documents for appointment.","timestamp":"2025-08-16 16:32:01"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: 1,\n            serviceId: 1,\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: new Date(\"2025-08-16T03:30:32.338Z\"),\n            reference: \"APP-1-121452\",\n            notes: \"need to meet in person\",\n            documents: [\n              {\n                name: \"Black and Red Business Application Letter.jpg\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Black and Red Business Application Letter.jpg_1755342121554.jpg\"\n              },\n              {\n                name: \"Black and Red Business Application Letter.jpg\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Black and Red Business Application Letter.jpg_1755342121555.jpg\"\n              },\n              {\n                name: \"Black and Red Business Application Letter.jpg\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Black and Red Business Application Letter.jpg_1755342121555.jpg\"\n              }\n            ],\n            createdAt: new Date(\"2025-08-16T11:02:01.642Z\"),\n            updatedAt: new Date(\"2025-08-16T11:02:01.642Z\"),\n        +   qrcode: String\n          }\n        })\n\nArgument `qrcode` is missing.","timestamp":"2025-08-16 16:32:01"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 16:36:37"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 16:36:38"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 16:36:38"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 16:36:38"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 16:36:38"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 16:36:38"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 16:36:47"}
{"dateOfBirth":"2025-08-14","email":"dinukpkcc@gmail.com","firstName":"dinuk","gender":"MALE","lastName":"pathiraja","level":"info","message":"Registration Body:","nationalId":"9913219425","password":"12345678","phoneNumber":"0702672689","role":"CITIZEN","timestamp":"2025-08-16 16:37:41"}
{"level":"info","message":"Starting appointment creation...","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"Request body: {\"userId\":\"1\",\"serviceId\":\"1\",\"type\":\"IN_PERSON\",\"status\":\"PENDING\",\"scheduledAt\":\"2025-08-16T05:00:17.472Z\",\"reference\":\"APP-1-520429\",\"notes\":\"ned to meet in person\"}","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"Number of files uploaded: 3","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"Appointment data prepared: {\"userId\":1,\"serviceId\":1,\"type\":\"IN_PERSON\",\"status\":\"PENDING\",\"scheduledAt\":\"2025-08-16T05:00:17.472Z\",\"reference\":\"APP-1-520429\",\"notes\":\"ned to meet in person\"}","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"Looking up user with ID: 1","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"User found: dinukpkcc@gmail.com","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"Looking up service with ID: 1","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"Service found: Tourist Visa Issuance","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"Starting document upload for 3 files","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"File names: [\"Black and Red Business Application Letter.jpg\",\"Black and Red Business Application Letter.jpg\",\"Black and Red Business Application Letter.jpg\"]","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"Successfully uploaded 3 documents for appointment.","timestamp":"2025-08-16 16:38:40"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.documents.createMany()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:85:49\n\n  82 const appointment = await prisma.appointment.findUnique({ where: { id: appointmentId } });\n  83 if (!appointment) throw new Error('Appointment not found');\n  84 \n→ 85 const newDocuments = await prisma.documents.createMany({\n       data: [\n         {\n           name: \"Black and Red Business Application Letter.jpg\",\n           url: \"http://localhost:9000/appointment-documents/user_1/Black and Red Business Application Letter.jpg_1755342520513.jpg\",\n           appointmentId: 1,\n           appointment: {\n             connect: {\n               id: 1\n             }\n           }\n         },\n         {\n           name: \"Black and Red Business Application Letter.jpg\",\n           url: \"http://localhost:9000/appointment-documents/user_1/Black and Red Business Application Letter.jpg_1755342520514.jpg\",\n           appointmentId: 1,\n           appointment: {\n             connect: {\n               id: 1\n             }\n           }\n         },\n         {\n           name: \"Black and Red Business Application Letter.jpg\",\n           url: \"http://localhost:9000/appointment-documents/user_1/Black and Red Business Application Letter.jpg_1755342520515.jpg\",\n           appointmentId: 1,\n           appointment: {\n             connect: {\n               id: 1\n             }\n           }\n         }\n       ]\n     })\n\nUnknown argument `appointment`. Did you mean `appointmentId`? Available options are marked with ?.","timestamp":"2025-08-16 16:38:40"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 16:42:36"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 16:42:36"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 16:42:36"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 16:42:36"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 16:42:36"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 16:42:36"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 16:42:44"}
{"level":"info","message":"Starting appointment creation...","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"Request body: {\"userId\":\"1\",\"serviceId\":\"1\",\"type\":\"IN_PERSON\",\"status\":\"PENDING\",\"scheduledAt\":\"2025-08-16T05:00:17.472Z\",\"reference\":\"APP-1-770220\",\"notes\":\"ned to meet in person\"}","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"Number of files uploaded: 3","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"Appointment data prepared: {\"userId\":1,\"serviceId\":1,\"type\":\"IN_PERSON\",\"status\":\"PENDING\",\"scheduledAt\":\"2025-08-16T05:00:17.472Z\",\"reference\":\"APP-1-770220\",\"notes\":\"ned to meet in person\"}","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"Looking up user with ID: 1","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"User found: dinukpkcc@gmail.com","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"Looking up service with ID: 1","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"Service found: Tourist Visa Issuance","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"Starting document upload for 3 files","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"File names: [\"Black and Red Business Application Letter.jpg\",\"Black and Red Business Application Letter.jpg\",\"Black and Red Business Application Letter.jpg\"]","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"Successfully uploaded 3 documents for appointment.","timestamp":"2025-08-16 16:42:50"}
{"level":"error","message":"Document upload failed: File not found at path: /tmp/qr_code_1755342770526.png","timestamp":"2025-08-16 16:42:50"}
{"level":"error","message":"Qr uploadning Error: Document upload failed: File not found at path: /tmp/qr_code_1755342770526.png","stack":"Error: Document upload failed: File not found at path: /tmp/qr_code_1755342770526.png\n    at DocumentService.<anonymous> (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\services\\DocumentService.ts:98:13)\n    at Generator.next (<anonymous>)\n    at D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\services\\DocumentService.ts:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\services\\DocumentService.ts:4:12)\n    at DocumentService.uploadDocument (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\services\\DocumentService.ts:60:16)\n    at AppointmentService.<anonymous> (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\services\\AppointmentService.ts:168:51)\n    at Generator.next (<anonymous>)\n    at fulfilled (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\services\\AppointmentService.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)","timestamp":"2025-08-16 16:42:50"}
{"level":"info","message":"QR code sent to WhatsApp for user 1","timestamp":"2025-08-16 16:42:52"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 16:49:12"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 16:49:12"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 16:49:12"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 16:49:12"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 16:49:12"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 16:49:12"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 16:49:21"}
{"level":"info","message":"Starting appointment creation...","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"Request body: {\"userId\":\"1\",\"serviceId\":\"4\",\"type\":\"IN_PERSON\",\"status\":\"PENDING\",\"scheduledAt\":\"2025-08-16T05:00:02.002Z\",\"reference\":\"APP-4-222336\",\"notes\":\"No\"}","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"Number of files uploaded: 3","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"Appointment data prepared: {\"userId\":1,\"serviceId\":4,\"type\":\"IN_PERSON\",\"status\":\"PENDING\",\"scheduledAt\":\"2025-08-16T05:00:02.002Z\",\"reference\":\"APP-4-222336\",\"notes\":\"No\"}","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"Looking up user with ID: 1","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"User found: dinukpkcc@gmail.com","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"Looking up service with ID: 4","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"Service found: National Identity Card Issuance","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"Starting document upload for 3 files","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"File names: [\"Black and Red Business Application Letter.jpg\",\"ChatGPT Image Aug 12, 2025, 08_00_38 PM.png\",\"Black and Red Business Application Letter.jpg\"]","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"Successfully uploaded 3 documents for appointment.","timestamp":"2025-08-16 16:50:22"}
{"level":"error","message":"Failed to create appointment: ENOENT: no such file or directory, open 'D:\\tmp\\qr_code_1755343222643.png'","timestamp":"2025-08-16 16:50:22"}
{"level":"info","message":"Seeding database...","timestamp":"2025-08-16 17:00:51"}
{"level":"info","message":"Database seeded successfully","timestamp":"2025-08-16 17:00:51"}
{"level":"info","message":"Starting notification service...","timestamp":"2025-08-16 17:00:51"}
{"level":"info","message":"Notification service started successfully","timestamp":"2025-08-16 17:00:51"}
{"level":"info","message":"Server started on http://localhost:3000","timestamp":"2025-08-16 17:00:51"}
{"level":"info","message":"Health check: http://localhost:3000/health","timestamp":"2025-08-16 17:00:51"}
{"level":"info","message":"WhatsApp client initialized","timestamp":"2025-08-16 17:01:02"}
{"level":"info","message":"Starting appointment creation...","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"Request body: {\"userId\":\"1\",\"serviceId\":\"4\",\"type\":\"IN_PERSON\",\"status\":\"PENDING\",\"scheduledAt\":\"2025-08-16T05:00:02.002Z\",\"reference\":\"APP-4-866342\",\"notes\":\"No\"}","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"Number of files uploaded: 3","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"Appointment data prepared: {\"userId\":1,\"serviceId\":4,\"type\":\"IN_PERSON\",\"status\":\"PENDING\",\"scheduledAt\":\"2025-08-16T05:00:02.002Z\",\"reference\":\"APP-4-866342\",\"notes\":\"No\"}","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"Looking up user with ID: 1","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"User found: dinukpkcc@gmail.com","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"Looking up service with ID: 4","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"Service found: National Identity Card Issuance","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"Starting document upload for 3 files","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"File names: [\"Black and Red Business Application Letter.jpg\",\"ChatGPT Image Aug 12, 2025, 08_00_38 PM.png\",\"Black and Red Business Application Letter.jpg\"]","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"Successfully uploaded 3 documents for appointment.","timestamp":"2025-08-16 17:01:06"}
{"level":"info","message":"QR code sent to WhatsApp for user 1","timestamp":"2025-08-16 17:01:08"}
