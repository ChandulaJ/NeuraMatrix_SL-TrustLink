{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 01:45:51"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 01:45:51"}
{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:23:56"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:23:56"}
{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:24:17"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:24:17"}
{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:25:20"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:25:20"}
{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:28:51"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:28:51"}
{"level":"error","message":"Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:29:07"}
{"level":"error","message":"Failed to delete appointment: Failed to delete appointment: Appointment not found","timestamp":"2025-08-13 15:29:07"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\nD:\\Trustlink\\NeuraMatrix_SL-TrustLink\\server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`serviceId`)","timestamp":"2025-08-13 18:33:28"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\nD:\\Trustlink\\NeuraMatrix_SL-TrustLink\\server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`serviceId`)","timestamp":"2025-08-13 18:33:28"}
{"clientVersion":"6.14.0","code":"P2021","level":"error","message":"Error during server startup: \nInvalid `prisma.user.findUnique()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:5:42\n\n  2 import { Gender, Role } from \"../../models/User\";\n  3 \n  4 export async function seedDummyUser() {\n→ 5   const existingUser = await prisma.user.findUnique(\nThe table `User` does not exist in the current database.","meta":{"modelName":"User","table":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:5:42\n\n  2 import { Gender, Role } from \"../../models/User\";\n  3 \n  4 export async function seedDummyUser() {\n→ 5   const existingUser = await prisma.user.findUnique(\nThe table `User` does not exist in the current database.\n    at ei.handleRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:228:13)\n    at ei.handleAndLogRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:174:12)\n    at ei.request (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:143:12)\n    at async a (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/getPrismaClient.ts:833:24)","timestamp":"2025-08-14 00:14:27"}
{"level":"error","message":"Failed to create appointment: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","timestamp":"2025-08-13 18:58:45"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","timestamp":"2025-08-13 18:58:45"}
{"level":"error","message":"Failed to create appointment: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","timestamp":"2025-08-13 18:59:59"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","timestamp":"2025-08-13 18:59:59"}
{"clientVersion":"6.14.0","level":"error","message":"Error during server startup: \nInvalid `prisma.user.findUnique()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:5:42\n\n  2 import { Gender, Role } from \"../../models/User\";\n  3 \n  4 export async function seedDummyUser() {\n→ 5   const existingUser = await prisma.user.findUnique(\nCan't reach database server at `localhost:3307`\n\nPlease make sure your database server is running at `localhost:3307`.","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:5:42\n\n  2 import { Gender, Role } from \"../../models/User\";\n  3 \n  4 export async function seedDummyUser() {\n→ 5   const existingUser = await prisma.user.findUnique(\nCan't reach database server at `localhost:3307`\n\nPlease make sure your database server is running at `localhost:3307`.\n    at ei.handleRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:242:13)\n    at ei.handleAndLogRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:174:12)\n    at ei.request (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:143:12)\n    at async a (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/getPrismaClient.ts:833:24)","timestamp":"2025-08-14 00:31:03"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:11:56.616Z\"),\n            updatedAt: new Date(\"2025-08-14T08:11:56.616Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:41:57"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:11:56.616Z\"),\n            updatedAt: new Date(\"2025-08-14T08:11:56.616Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:41:57"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:13:40.498Z\"),\n            updatedAt: new Date(\"2025-08-14T08:13:40.498Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:43:40"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:13:40.498Z\"),\n            updatedAt: new Date(\"2025-08-14T08:13:40.498Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:43:40"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:19:12.915Z\"),\n            updatedAt: new Date(\"2025-08-14T08:19:12.915Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:49:13"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:19:12.915Z\"),\n            updatedAt: new Date(\"2025-08-14T08:19:12.915Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:49:13"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:21:36.723Z\"),\n            updatedAt: new Date(\"2025-08-14T08:21:36.723Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:51:36"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:21:36.723Z\"),\n            updatedAt: new Date(\"2025-08-14T08:21:36.723Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:51:36"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:22:39.639Z\"),\n            updatedAt: new Date(\"2025-08-14T08:22:39.639Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:52:39"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:22:39.639Z\"),\n            updatedAt: new Date(\"2025-08-14T08:22:39.639Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:52:39"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:25:33.476Z\"),\n            updatedAt: new Date(\"2025-08-14T08:25:33.476Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:55:33"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:25:33.476Z\"),\n            updatedAt: new Date(\"2025-08-14T08:25:33.476Z\"),\n        +   type: AppointmentType\n          }\n        })\n\nArgument `type` is missing.","timestamp":"2025-08-14 13:55:33"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: \"1\",\n                    ~~~\n            serviceId: \"1\",\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: \"2024-08-15T10:00:00Z\",\n            notes: \"Appointment with documents\",\n            documentNames: \"[\\\"NIC\\\", \\\"Passport\\\"]\",\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:33:38.913Z\"),\n            updatedAt: new Date(\"2025-08-14T08:33:38.913Z\")\n          }\n        })\n\nArgument `userId`: Invalid value provided. Expected Int, provided String.","timestamp":"2025-08-14 14:03:39"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: \"1\",\n                    ~~~\n            serviceId: \"1\",\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: \"2024-08-15T10:00:00Z\",\n            notes: \"Appointment with documents\",\n            documentNames: \"[\\\"NIC\\\", \\\"Passport\\\"]\",\n            documents: [],\n            createdAt: new Date(\"2025-08-14T08:33:38.913Z\"),\n            updatedAt: new Date(\"2025-08-14T08:33:38.913Z\")\n          }\n        })\n\nArgument `userId`: Invalid value provided. Expected Int, provided String.","timestamp":"2025-08-14 14:03:39"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: \"1\",\n                    ~~~\n            serviceId: \"1\",\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: new Date(\"2024-08-15T10:00:00.000Z\"),\n            notes: \"Appointment with documents\",\n            documentNames: \"[\\\"NIC\\\", \\\"Passport\\\"]\",\n            documents: [\n              {\n                name: \"NIC\",\n                url: \"http://localhost:9000/appointment-documents/user_1/NIC_1755160576953.pdf\"\n              },\n              {\n                name: \"Passport\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Passport_1755160576954.png\"\n              }\n            ],\n            createdAt: new Date(\"2025-08-14T08:36:17.019Z\"),\n            updatedAt: new Date(\"2025-08-14T08:36:17.019Z\")\n          }\n        })\n\nArgument `userId`: Invalid value provided. Expected Int, provided String.","timestamp":"2025-08-14 14:06:17"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: 1,\n            serviceId: 1,\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: new Date(\"2024-08-15T10:00:00.000Z\"),\n            notes: \"Appointment with documents\",\n            documentNames: \"[\\\"NIC\\\", \\\"Passport\\\"]\",\n            ~~~~~~~~~~~~~\n            documents: [\n              {\n                name: \"NIC\",\n                url: \"http://localhost:9000/appointment-documents/user_1/NIC_1755160734152.pdf\"\n              },\n              {\n                name: \"Passport\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Passport_1755160734153.png\"\n              }\n            ],\n            createdAt: new Date(\"2025-08-14T08:38:54.214Z\"),\n            updatedAt: new Date(\"2025-08-14T08:38:54.214Z\"),\n        ?   id?: Int\n          }\n        })\n\nUnknown argument `documentNames`. Available options are marked with ?.","timestamp":"2025-08-14 14:08:54"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: 1,\n            serviceId: 1,\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: new Date(\"2024-08-15T10:00:00.000Z\"),\n            notes: \"Appointment with documents\",\n            documentNames: \"[\\\"NIC\\\", \\\"Passport\\\"]\",\n            ~~~~~~~~~~~~~\n            documents: [\n              {\n                name: \"NIC\",\n                url: \"http://localhost:9000/appointment-documents/user_1/NIC_1755160948991.pdf\"\n              },\n              {\n                name: \"Passport\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Passport_1755160948994.png\"\n              }\n            ],\n            createdAt: new Date(\"2025-08-14T08:42:29.070Z\"),\n            updatedAt: new Date(\"2025-08-14T08:42:29.070Z\"),\n        ?   id?: Int\n          }\n        })\n\nUnknown argument `documentNames`. Available options are marked with ?.","timestamp":"2025-08-14 14:12:29"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`userId`)","timestamp":"2025-08-14 19:38:13"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`userId`)","timestamp":"2025-08-14 19:44:41"}
{"clientVersion":"6.14.0","level":"error","message":"Error fetching service: \nInvalid `prisma.service.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaServiceInterface.ts:11:37\n\n   8 }\n   9 \n  10 async getServiceById(id: string): Promise<Service | null> {\n→ 11     return await prisma.service.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.service.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaServiceInterface.ts:11:37\n\n   8 }\n   9 \n  10 async getServiceById(id: string): Promise<Service | null> {\n→ 11     return await prisma.service.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.\n    at throwValidationException (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\core\\errorRendering\\throwValidationException.ts:45:9)\n    at ei.handleRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:174:12)\n    at ei.request (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:143:12)\n    at async a (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\getPrismaClient.ts:833:24)","timestamp":"2025-08-15 13:27:48"}
{"clientVersion":"6.14.0","level":"error","message":"Error fetching service: \nInvalid `prisma.service.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaServiceInterface.ts:11:37\n\n   8 }\n   9 \n  10 async getServiceById(id: string): Promise<Service | null> {\n→ 11     return await prisma.service.findUnique({\n           where: {\n             id: \"departmentId\"\n                 ~~~~~~~~~~~~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.service.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaServiceInterface.ts:11:37\n\n   8 }\n   9 \n  10 async getServiceById(id: string): Promise<Service | null> {\n→ 11     return await prisma.service.findUnique({\n           where: {\n             id: \"departmentId\"\n                 ~~~~~~~~~~~~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.\n    at throwValidationException (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\core\\errorRendering\\throwValidationException.ts:45:9)\n    at ei.handleRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:174:12)\n    at ei.request (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:143:12)\n    at async a (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\getPrismaClient.ts:833:24)","timestamp":"2025-08-15 13:28:47"}
{"clientVersion":"6.14.0","level":"error","message":"Error fetching department: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.\n    at throwValidationException (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\core\\errorRendering\\throwValidationException.ts:45:9)\n    at ei.handleRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:174:12)\n    at ei.request (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:143:12)\n    at async a (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\getPrismaClient.ts:833:24)","timestamp":"2025-08-15 14:03:10"}
{"clientVersion":"6.14.0","level":"error","message":"Error fetching department: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.\n    at throwValidationException (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\core\\errorRendering\\throwValidationException.ts:45:9)\n    at ei.handleRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:174:12)\n    at ei.request (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:143:12)\n    at async a (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\getPrismaClient.ts:833:24)","timestamp":"2025-08-15 14:03:40"}
{"clientVersion":"6.14.0","level":"error","message":"Error fetching department: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.department.findUnique()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaDepartmentInterface.ts:12:40\n\n   9 }\n  10 \n  11 async getDepartmentById(id: string): Promise<Department | null> {\n→ 12     return await prisma.department.findUnique({\n           where: {\n             id: \"1\"\n                 ~~~\n           }\n         })\n\nArgument `id`: Invalid value provided. Expected Int, provided String.\n    at throwValidationException (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\core\\errorRendering\\throwValidationException.ts:45:9)\n    at ei.handleRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:174:12)\n    at ei.request (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\RequestHandler.ts:143:12)\n    at async a (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\@prisma\\client\\src\\runtime\\getPrismaClient.ts:833:24)","timestamp":"2025-08-15 14:04:03"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`userId`)","timestamp":"2025-08-15 14:16:53"}
{"level":"error","message":"Failed to create appointment: Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\nD:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\src\\infrastructure\\database\\interfaces\\PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create(\nForeign key constraint violated on the fields: (`userId`)","timestamp":"2025-08-15 14:16:53"}
{"clientVersion":"6.14.0","level":"error","message":"Error during server startup: \nInvalid `prisma.service.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:166:30\n\n  163 });\n  164 \n  165 if (!existingService) {\n→ 166   await prisma.service.create({\n          data: {\n            name: \"Tourist Visa Issuance\",\n            description: \"Issuance of visas for tourists visiting Sri Lanka.\",\n            duration: 10,\n            price: 50,\n            availableSlots: 100,\n            requirements: [\n              \"Passport\",\n              \"Passport-sized Photo\",\n              \"Visa Application Form\"\n            ],\n            category: \"Visa\",\n            departmentId: 2,\n            status: \"available\",\n            ~~~~~~\n        ?   id?: Int,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput\n          }\n        })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.service.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:166:30\n\n  163 });\n  164 \n  165 if (!existingService) {\n→ 166   await prisma.service.create({\n          data: {\n            name: \"Tourist Visa Issuance\",\n            description: \"Issuance of visas for tourists visiting Sri Lanka.\",\n            duration: 10,\n            price: 50,\n            availableSlots: 100,\n            requirements: [\n              \"Passport\",\n              \"Passport-sized Photo\",\n              \"Visa Application Form\"\n            ],\n            category: \"Visa\",\n            departmentId: 2,\n            status: \"available\",\n            ~~~~~~\n        ?   id?: Int,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput\n          }\n        })\n\nUnknown argument `status`. Available options are marked with ?.\n    at throwValidationException (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/core/errorRendering/throwValidationException.ts:45:9)\n    at ei.handleRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:174:12)\n    at ei.request (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:143:12)\n    at async a (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/getPrismaClient.ts:833:24)","timestamp":"2025-08-15 21:51:05"}
{"clientVersion":"6.14.0","level":"error","message":"Error during server startup: \nInvalid `prisma.service.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:166:30\n\n  163 });\n  164 \n  165 if (!existingService) {\n→ 166   await prisma.service.create({\n          data: {\n            name: \"Tourist Visa Issuance\",\n            description: \"Issuance of visas for tourists visiting Sri Lanka.\",\n            duration: 10,\n            price: 50,\n            availableSlots: 100,\n            requirements: [\n              \"Passport\",\n              \"Passport-sized Photo\",\n              \"Visa Application Form\"\n            ],\n            category: \"Visa\",\n            departmentId: 2,\n            status: \"available\",\n            ~~~~~~\n        ?   id?: Int,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput\n          }\n        })\n\nUnknown argument `status`. Available options are marked with ?.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.service.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/seed.ts:166:30\n\n  163 });\n  164 \n  165 if (!existingService) {\n→ 166   await prisma.service.create({\n          data: {\n            name: \"Tourist Visa Issuance\",\n            description: \"Issuance of visas for tourists visiting Sri Lanka.\",\n            duration: 10,\n            price: 50,\n            availableSlots: 100,\n            requirements: [\n              \"Passport\",\n              \"Passport-sized Photo\",\n              \"Visa Application Form\"\n            ],\n            category: \"Visa\",\n            departmentId: 2,\n            status: \"available\",\n            ~~~~~~\n        ?   id?: Int,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput\n          }\n        })\n\nUnknown argument `status`. Available options are marked with ?.\n    at throwValidationException (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/core/errorRendering/throwValidationException.ts:45:9)\n    at ei.handleRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:202:7)\n    at ei.handleAndLogRequestError (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:174:12)\n    at ei.request (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/RequestHandler.ts:143:12)\n    at async a (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/@prisma/client/src/runtime/getPrismaClient.ts:833:24)","timestamp":"2025-08-15 21:52:16"}
{"level":"error","message":"Error during server startup: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","stack":"MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.\n    at Socket.<anonymous> (/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/node_modules/ioredis/built/redis/event_handler.js:182:37)\n    at Object.onceWrapper (node:events:632:26)\n    at Socket.emit (node:events:517:28)\n    at Socket.emit (node:domain:489:12)\n    at TCP.<anonymous> (node:net:351:12)","timestamp":"2025-08-15 21:56:00"}
{"level":"error","message":"Failed to create appointment: \nInvalid `prisma.appointment.create()` invocation in\n/home/tharindu/projects/rootcode/NeuraMatrix_SL-TrustLink/server/src/infrastructure/database/interfaces/PrismaAppointmentInterface.ts:8:31\n\n  5 \n  6 export class PrismaAppointmentInterface implements AppointmentInterface {\n  7   async create(appointment: Appointment): Promise<Appointment> {\n→ 8     return prisma.appointment.create({\n          data: {\n            userId: 1,\n            serviceId: 1,\n            type: \"IN_PERSON\",\n            status: \"PENDING\",\n            scheduledAt: new Date(\"2025-08-17T10:00:00.000Z\"),\n            notes: \"Appointment with documents\",\n            documents: [\n              {\n                name: \"Computer Studies_CA 15B-1.pdf\",\n                url: \"http://localhost:9000/appointment-documents/user_1/Computer Studies_CA 15B-1.pdf_1755275407522.pdf\"\n              }\n            ],\n            createdAt: new Date(\"2025-08-15T16:30:07.601Z\"),\n            updatedAt: new Date(\"2025-08-15T16:30:07.601Z\"),\n        +   reference: String\n          }\n        })\n\nArgument `reference` is missing.","timestamp":"2025-08-15 22:00:07"}
{"level":"error","message":"Failed to ensure bucket exists: ","timestamp":"2025-08-16 00:30:12"}
{"level":"error","message":"Failed to ensure bucket exists: ","timestamp":"2025-08-16 00:30:25"}
{"level":"error","message":"Error during server startup: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.","stack":"MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to \"maxRetriesPerRequest\" option for details.\n    at Socket.<anonymous> (D:\\Competition\\RootCode\\2nd_round\\appointment_service\\Server\\node_modules\\ioredis\\built\\redis\\event_handler.js:182:37)\n    at Object.onceWrapper (node:events:622:26)\n    at Socket.emit (node:events:507:28)\n    at Socket.emit (node:domain:489:12)\n    at TCP.<anonymous> (node:net:351:12)","timestamp":"2025-08-16 00:30:35"}
